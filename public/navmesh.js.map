{"version":3,"sources":["webpack://NavMesh/webpack/universalModuleDefinition","webpack://NavMesh/../node_modules/javascript-astar/astar.js","webpack://NavMesh/./math/vector-2.ts","webpack://NavMesh/./navpoly.ts","webpack://NavMesh/./utils.ts","webpack://NavMesh/./channel.ts","webpack://NavMesh/./math/line.ts","webpack://NavMesh/./math/polygon.ts","webpack://NavMesh/./index.ts","webpack://NavMesh/./navmesh.ts","webpack://NavMesh/./navgraph.ts","webpack://NavMesh/webpack/bootstrap","webpack://NavMesh/webpack/startup","webpack://NavMesh/webpack/runtime/compat get default export","webpack://NavMesh/webpack/runtime/define property getters","webpack://NavMesh/webpack/runtime/hasOwnProperty shorthand"],"names":["root","factory","exports","module","define","amd","self","this","definition","pathTo","node","curr","path","parent","unshift","astar","search","graph","start","end","options","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","f","closestNode","h","markDirty","push","size","currentNode","pop","closed","neighbors","i","il","length","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","Math","abs","x","y","diagonal","D2","sqrt","d1","d2","min","cleanNode","Graph","gridIn","nodes","grid","row","GridNode","init","weight","scoreFunction","content","prototype","dirtyNodes","ret","toString","graphString","rowDebug","join","fromNeighbor","element","sinkDown","result","bubbleUp","remove","indexOf","n","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2","Vector2","v","atan2","dx","dy","NavPoly","id","polygon","edges","portals","centroid","calculateCentroid","boundingRadius","calculateRadius","points","point","contains","isPointOnEdge","forEach","p","add","d","distance","edge","pointOnSegment","navPolygon","centroidDistance","projectPointToEdge","line","a","b","l2","distanceSquared","t","value","triarea2","c","ax","ay","almostEqual","value1","value2","errorMargin","angleDifference","PI","j","floor","areCollinear","line1","line2","area1","area2","Channel","p1","p2","undefined","left","right","pts","apexIndex","leftIndex","rightIndex","portalApex","portalLeft","portalRight","equals","Line","x1","y1","x2","y2","max","top","bottom","pointOnLine","Polygon","isClosed","first","last","inside","ix","iy","jx","jy","meshPolygonPoints","meshShrinkAmount","newPolys","map","polyPoints","vectors","navPolygons","calculateNeighbors","navPolygon1","navPolygon2","destroy","poly","some","navPoly","maxAllowableDist","Number","POSITIVE_INFINITY","minDistance","closestPoly","pointOnClosestPoly","r","projectPointToPolygon","startPoint","endPoint","startPoly","endPoly","startDistance","MAX_VALUE","endDistance","startVector","endVector","astarPath","navHeuristic","channel","nextNavPolygon","portal","Error","stringPull","lastPoint","phaserPath","newPoint","clone","otherNavPoly","otherEdge","overlap","getSegmentOverlap","edgeStartAngle","angle","a1","a2","sort","noOverlap","singlePointOverlap","closestProjection","closestDistance","projectedPoint","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","getter","__esModule","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call"],"mappings":"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","file":"navmesh.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NavMesh\"] = factory();\n\telse\n\t\troot[\"NavMesh\"] = factory();\n})((typeof self !== \"undefined\" ? self : this), function() {\nreturn ","// javascript-astar 0.4.2\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n(function(definition) {\n  /* global module, define */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], definition);\n  } else {\n    var exports = definition();\n    window.astar = exports.astar;\n    window.Graph = exports.Graph;\n  }\n})(function() {\n\nfunction pathTo(node) {\n  var curr = node;\n  var path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function(node) {\n    return node.f;\n  });\n}\n\nvar astar = {\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\n    var closest = options.closest || false;\n\n    var openHeap = getHeap();\n    var closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n};\n\n/**\n * A graph memory structure\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options]\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n */\nfunction Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function() {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function() {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function(node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function(node) {\n  var ret = [];\n  var x = node.x;\n  var y = node.y;\n  var grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function() {\n  var graphString = [];\n  var nodes = this.grid;\n  for (var x = 0; x < nodes.length; x++) {\n    var rowDebug = [];\n    var row = nodes[x];\n    for (var y = 0; y < row.length; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function() {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function(fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function() {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function() {\n    return this.content.length;\n  },\n  rescoreElement: function(node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n};\n\nreturn {\n  astar: astar,\n  Graph: Graph\n};\n\n});","/**\r\n * Stripped down version of Phaser's Vector2 with just the functionality needed for navmeshes.\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport default class Vector2 {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    equals(v) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    angle(v) {\r\n        return Math.atan2(v.y - this.y, v.x - this.x);\r\n    }\r\n    distance(v) {\r\n        const dx = v.x - this.x;\r\n        const dy = v.y - this.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n    }\r\n    subtract(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n/**\r\n * A class that represents a navigable polygon with a navmesh. It is built on top of a\r\n * {@link Polygon}. It implements the properties and fields that javascript-astar needs - weight,\r\n * toString, isWall and getCost. See GPS test from astar repo for structure:\r\n * https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n */\r\nexport default class NavPoly {\r\n    /**\r\n     * Creates an instance of NavPoly.\r\n     */\r\n    constructor(id, polygon) {\r\n        // jsastar property:\r\n        this.weight = 1;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.id = id;\r\n        this.polygon = polygon;\r\n        this.edges = polygon.edges;\r\n        this.neighbors = [];\r\n        this.portals = [];\r\n        this.centroid = this.calculateCentroid();\r\n        this.boundingRadius = this.calculateRadius();\r\n    }\r\n    /**\r\n     * Returns an array of points that form the polygon.\r\n     */\r\n    getPoints() {\r\n        return this.polygon.points;\r\n    }\r\n    /**\r\n     * Check if the given point-like object is within the polygon.\r\n     */\r\n    contains(point) {\r\n        // Phaser's polygon check doesn't handle when a point is on one of the edges of the line. Note:\r\n        // check numerical stability here. It would also be good to optimize this for different shapes.\r\n        return this.polygon.contains(point.x, point.y) || this.isPointOnEdge(point);\r\n    }\r\n    /**\r\n     * Only rectangles are supported, so this calculation works, but this is not actually the centroid\r\n     * calculation for a polygon. This is just the average of the vertices - proper centroid of a\r\n     * polygon factors in the area.\r\n     */\r\n    calculateCentroid() {\r\n        const centroid = new Vector2(0, 0);\r\n        const length = this.polygon.points.length;\r\n        this.polygon.points.forEach((p) => centroid.add(p));\r\n        centroid.x /= length;\r\n        centroid.y /= length;\r\n        return centroid;\r\n    }\r\n    /**\r\n     * Calculate the radius of a circle that circumscribes the polygon.\r\n     */\r\n    calculateRadius() {\r\n        let boundingRadius = 0;\r\n        for (const point of this.polygon.points) {\r\n            const d = this.centroid.distance(point);\r\n            if (d > boundingRadius)\r\n                boundingRadius = d;\r\n        }\r\n        return boundingRadius;\r\n    }\r\n    /**\r\n     * Check if the given point-like object is on one of the edges of the polygon.\r\n     */\r\n    isPointOnEdge({ x, y }) {\r\n        for (const edge of this.edges) {\r\n            if (edge.pointOnSegment(x, y))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    destroy() {\r\n        this.neighbors = [];\r\n        this.portals = [];\r\n    }\r\n    // === jsastar methods ===\r\n    toString() {\r\n        return `NavPoly(id: ${this.id} at: ${this.centroid})`;\r\n    }\r\n    isWall() {\r\n        return this.weight === 0;\r\n    }\r\n    centroidDistance(navPolygon) {\r\n        return this.centroid.distance(navPolygon.centroid);\r\n    }\r\n    getCost(navPolygon) {\r\n        return this.centroidDistance(navPolygon);\r\n    }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n/**\r\n * Calculate the distance squared between two points. This is an optimization to a square root when\r\n * you just need to compare relative distances without needing to know the specific distance.\r\n * @param a\r\n * @param b\r\n */\r\nexport function distanceSquared(a, b) {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n}\r\n/**\r\n * Project a point onto a line segment.\r\n * JS Source: http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\n * @param point\r\n * @param line\r\n */\r\nexport function projectPointToEdge(point, line) {\r\n    const a = line.start;\r\n    const b = line.end;\r\n    // Consider the parametric equation for the edge's line, p = a + t (b - a). We want to find\r\n    // where our point lies on the line by solving for t:\r\n    //  t = [(p-a) . (b-a)] / |b-a|^2\r\n    const l2 = distanceSquared(a, b);\r\n    let t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / l2;\r\n    // We clamp t from [0,1] to handle points outside the segment vw.\r\n    t = clamp(t, 0, 1);\r\n    // Project onto the segment\r\n    const p = new Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y));\r\n    return p;\r\n}\r\n/**\r\n * Twice the area of the triangle formed by a, b and c.\r\n */\r\nexport function triarea2(a, b, c) {\r\n    const ax = b.x - a.x;\r\n    const ay = b.y - a.y;\r\n    const bx = c.x - a.x;\r\n    const by = c.y - a.y;\r\n    return bx * ay - ax * by;\r\n}\r\n/**\r\n * Clamp the given value between min and max.\r\n */\r\nexport function clamp(value, min, max) {\r\n    if (value < min)\r\n        value = min;\r\n    if (value > max)\r\n        value = max;\r\n    return value;\r\n}\r\n/**\r\n * Check if two values are within a small margin of one another.\r\n */\r\nexport function almostEqual(value1, value2, errorMargin = 0.0001) {\r\n    if (Math.abs(value1 - value2) <= errorMargin)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n/**\r\n * Find the smallest angle difference between two angles\r\n * https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0\r\n */\r\nexport function angleDifference(x, y) {\r\n    let a = x - y;\r\n    const i = a + Math.PI;\r\n    const j = Math.PI * 2;\r\n    a = i - Math.floor(i / j) * j; // (a+180) % 360; this ensures the correct sign\r\n    a -= Math.PI;\r\n    return a;\r\n}\r\n/**\r\n * Check if two lines are collinear (within a small error margin).\r\n */\r\nexport function areCollinear(line1, line2, errorMargin = 0.0001) {\r\n    // Figure out if the two lines are equal by looking at the area of the triangle formed\r\n    // by their points\r\n    const area1 = triarea2(line1.start, line1.end, line2.start);\r\n    const area2 = triarea2(line1.start, line1.end, line2.end);\r\n    if (almostEqual(area1, 0, errorMargin) && almostEqual(area2, 0, errorMargin)) {\r\n        return true;\r\n    }\r\n    else\r\n        return false;\r\n}\r\nexport function isTruthy(input) {\r\n    return Boolean(input);\r\n}\r\n","// Mostly sourced from PatrolJS at the moment. TODO: come back and reimplement this as an incomplete\r\n// funnel algorithm so astar checks can be more accurate.\r\nimport { triarea2 } from \"./utils\";\r\n/**\r\n * @private\r\n */\r\nexport default class Channel {\r\n    constructor() {\r\n        this.portals = [];\r\n        this.path = [];\r\n    }\r\n    push(p1, p2) {\r\n        if (p2 === undefined)\r\n            p2 = p1;\r\n        this.portals.push({\r\n            left: p1,\r\n            right: p2,\r\n        });\r\n    }\r\n    stringPull() {\r\n        const portals = this.portals;\r\n        const pts = [];\r\n        // Init scan state\r\n        let apexIndex = 0;\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n        let portalApex = portals[0].left;\r\n        let portalLeft = portals[0].left;\r\n        let portalRight = portals[0].right;\r\n        // Add start point.\r\n        pts.push(portalApex);\r\n        for (var i = 1; i < portals.length; i++) {\r\n            // Find the next portal vertices\r\n            const left = portals[i].left;\r\n            const right = portals[i].right;\r\n            // Update right vertex.\r\n            if (triarea2(portalApex, portalRight, right) <= 0.0) {\r\n                if (portalApex.equals(portalRight) || triarea2(portalApex, portalLeft, right) > 0.0) {\r\n                    // Tighten the funnel.\r\n                    portalRight = right;\r\n                    rightIndex = i;\r\n                }\r\n                else {\r\n                    // Right vertex just crossed over the left vertex, so the left vertex should\r\n                    // now be part of the path.\r\n                    pts.push(portalLeft);\r\n                    // Restart scan from portal left point.\r\n                    // Make current left the new apex.\r\n                    portalApex = portalLeft;\r\n                    apexIndex = leftIndex;\r\n                    // Reset portal\r\n                    portalLeft = portalApex;\r\n                    portalRight = portalApex;\r\n                    leftIndex = apexIndex;\r\n                    rightIndex = apexIndex;\r\n                    // Restart scan\r\n                    i = apexIndex;\r\n                    continue;\r\n                }\r\n            }\r\n            // Update left vertex.\r\n            if (triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n                if (portalApex.equals(portalLeft) || triarea2(portalApex, portalRight, left) < 0.0) {\r\n                    // Tighten the funnel.\r\n                    portalLeft = left;\r\n                    leftIndex = i;\r\n                }\r\n                else {\r\n                    // Left vertex just crossed over the right vertex, so the right vertex should\r\n                    // now be part of the path\r\n                    pts.push(portalRight);\r\n                    // Restart scan from portal right point.\r\n                    // Make current right the new apex.\r\n                    portalApex = portalRight;\r\n                    apexIndex = rightIndex;\r\n                    // Reset portal\r\n                    portalLeft = portalApex;\r\n                    portalRight = portalApex;\r\n                    leftIndex = apexIndex;\r\n                    rightIndex = apexIndex;\r\n                    // Restart scan\r\n                    i = apexIndex;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        if (pts.length === 0 || !pts[pts.length - 1].equals(portals[portals.length - 1].left)) {\r\n            // Append last point to path.\r\n            pts.push(portals[portals.length - 1].left);\r\n        }\r\n        this.path = pts;\r\n        return pts;\r\n    }\r\n}\r\n","import Vector2 from \"./vector-2\";\r\n/**\r\n * Stripped down version of Phaser's Line with just the functionality needed for navmeshes.\r\n *\r\n * @export\r\n * @class Line\r\n */\r\nexport default class Line {\r\n    constructor(x1, y1, x2, y2) {\r\n        this.start = new Vector2(x1, y1);\r\n        this.end = new Vector2(x2, y2);\r\n        this.left = Math.min(x1, x2);\r\n        this.right = Math.max(x1, x2);\r\n        this.top = Math.min(y1, y2);\r\n        this.bottom = Math.max(y1, y2);\r\n    }\r\n    pointOnSegment(x, y) {\r\n        return (x >= this.left &&\r\n            x <= this.right &&\r\n            y >= this.top &&\r\n            y <= this.bottom &&\r\n            this.pointOnLine(x, y));\r\n    }\r\n    pointOnLine(x, y) {\r\n        // Compare slope of line start -> xy to line start -> line end\r\n        return (x - this.left) * (this.bottom - this.top) === (this.right - this.left) * (y - this.top);\r\n    }\r\n}\r\n","import Line from \"./line\";\r\n/**\r\n * Stripped down version of Phaser's Polygon with just the functionality needed for navmeshes.\r\n *\r\n * @export\r\n * @class Polygon\r\n */\r\nexport default class Polygon {\r\n    constructor(points, closed = true) {\r\n        this.isClosed = closed;\r\n        this.points = points;\r\n        this.edges = [];\r\n        for (let i = 1; i < points.length; i++) {\r\n            const p1 = points[i - 1];\r\n            const p2 = points[i];\r\n            this.edges.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n        }\r\n        if (this.isClosed) {\r\n            const first = points[0];\r\n            const last = points[points.length - 1];\r\n            this.edges.push(new Line(first.x, first.y, last.x, last.y));\r\n        }\r\n    }\r\n    contains(x, y) {\r\n        let inside = false;\r\n        for (let i = -1, j = this.points.length - 1; ++i < this.points.length; j = i) {\r\n            const ix = this.points[i].x;\r\n            const iy = this.points[i].y;\r\n            const jx = this.points[j].x;\r\n            const jy = this.points[j].y;\r\n            if (((iy <= y && y < jy) || (jy <= y && y < iy)) &&\r\n                x < ((jx - ix) * (y - iy)) / (jy - iy) + ix) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n        return inside;\r\n    }\r\n}\r\n","/**\r\n * `navmesh` is the core logic package. It is game-engine agnostic, usable outside of Phaser.\r\n * @packageDocumentation\r\n * @module navmesh\r\n */\r\nimport NavMesh from \"./navmesh\";\r\nexport { NavMesh };\r\nexport * from \"./common-types\";\r\nexport * from \"./map-parsers\";\r\nexport default NavMesh;\r\n","import jsastar from \"javascript-astar\";\r\nimport NavPoly from \"./navpoly\";\r\nimport NavGraph from \"./navgraph\";\r\nimport Channel from \"./channel\";\r\nimport { angleDifference, areCollinear, projectPointToEdge } from \"./utils\";\r\nimport Vector2 from \"./math/vector-2\";\r\nimport Line from \"./math/line\";\r\nimport Polygon from \"./math/polygon\";\r\n/**\r\n * The `NavMesh` class is the workhorse that represents a navigation mesh built from a series of\r\n * polygons. Once built, the mesh can be asked for a path from one point to another point. Some\r\n * internal terminology usage:\r\n * - neighbor: a polygon that shares part of an edge with another polygon\r\n * - portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\r\n * - channel: the path of polygons from starting point to end point\r\n * - pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\r\n *   channel. Equivalent to having a string snaking through a hallway and then pulling it taut.\r\n */\r\nexport default class NavMesh {\r\n    /**\r\n     * @param meshPolygonPoints Array where each element is an array of point-like objects that\r\n     * defines a polygon.\r\n     * @param meshShrinkAmount The amount (in pixels) that the navmesh has been shrunk around\r\n     * obstacles (a.k.a the amount obstacles have been expanded).\r\n     */\r\n    constructor(meshPolygonPoints, meshShrinkAmount = 0) {\r\n        this.meshShrinkAmount = meshShrinkAmount;\r\n        // Convert the PolyPoints[] into NavPoly instances.\r\n        const newPolys = meshPolygonPoints.map((polyPoints) => {\r\n            const vectors = polyPoints.map((p) => new Vector2(p.x, p.y));\r\n            return new Polygon(vectors);\r\n        });\r\n        this.navPolygons = newPolys.map((polygon, i) => new NavPoly(i, polygon));\r\n        this.calculateNeighbors();\r\n        // Astar graph of connections between polygons\r\n        this.graph = new NavGraph(this.navPolygons);\r\n    }\r\n    /**\r\n     * Get the NavPolys that are in this navmesh.\r\n     */\r\n    getPolygons() {\r\n        return this.navPolygons;\r\n    }\r\n    /**\r\n     * Cleanup method to remove references.\r\n     */\r\n    destroy() {\r\n        this.graph.destroy();\r\n        for (const poly of this.navPolygons)\r\n            poly.destroy();\r\n        this.navPolygons = [];\r\n    }\r\n    /**\r\n     * Find if the given point is within any of the polygons in the mesh.\r\n     * @param point\r\n     */\r\n    isPointInMesh(point) {\r\n        return this.navPolygons.some((navPoly) => navPoly.contains(point));\r\n    }\r\n    /**\r\n     * Find the closest point in the mesh to the given point. If the point is already in the mesh,\r\n     * this will give you that point. If the point is outside of the mesh, this will attempt to\r\n     * project this point into the mesh (up to the given maxAllowableDist). This returns an object\r\n     * with:\r\n     * - distance - from the given point to the mesh\r\n     * - polygon - the one the point is closest to, or null\r\n     * - point - the point inside the mesh, or null\r\n     * @param point\r\n     * @param maxAllowableDist\r\n     */\r\n    findClosestMeshPoint(point, maxAllowableDist = Number.POSITIVE_INFINITY) {\r\n        let minDistance = maxAllowableDist;\r\n        let closestPoly = null;\r\n        let pointOnClosestPoly = null;\r\n        for (const navPoly of this.navPolygons) {\r\n            // If we are inside a poly, we've got the closest.\r\n            if (navPoly.contains(point)) {\r\n                minDistance = 0;\r\n                closestPoly = navPoly;\r\n                pointOnClosestPoly = point;\r\n                break;\r\n            }\r\n            // Is the poly close enough to warrant a more accurate check? Point is definitely outside of\r\n            // the polygon. Distance - Radius is the smallest possible distance to an edge of the poly.\r\n            // This will underestimate distance, but that's perfectly fine.\r\n            const r = navPoly.boundingRadius;\r\n            const d = navPoly.centroid.distance(point);\r\n            if (d - r < minDistance) {\r\n                const result = this.projectPointToPolygon(point, navPoly);\r\n                if (result.distance < minDistance) {\r\n                    minDistance = result.distance;\r\n                    closestPoly = navPoly;\r\n                    pointOnClosestPoly = result.point;\r\n                }\r\n            }\r\n        }\r\n        return { distance: minDistance, polygon: closestPoly, point: pointOnClosestPoly };\r\n    }\r\n    /**\r\n     * Find a path from the start point to the end point using this nav mesh.\r\n     * @param {object} startPoint A point-like object in the form {x, y}\r\n     * @param {object} endPoint A point-like object in the form {x, y}\r\n     * @returns {Vector2[]|null} An array of points if a path is found, or null if no path\r\n     */\r\n    findPath(startPoint, endPoint) {\r\n        let startPoly = null;\r\n        let endPoly = null;\r\n        let startDistance = Number.MAX_VALUE;\r\n        let endDistance = Number.MAX_VALUE;\r\n        let d, r;\r\n        const startVector = new Vector2(startPoint.x, startPoint.y);\r\n        const endVector = new Vector2(endPoint.x, endPoint.y);\r\n        // Find the closest poly for the starting and ending point\r\n        for (const navPoly of this.navPolygons) {\r\n            r = navPoly.boundingRadius;\r\n            // Start\r\n            d = navPoly.centroid.distance(startVector);\r\n            if (d <= startDistance && d <= r && navPoly.contains(startVector)) {\r\n                startPoly = navPoly;\r\n                startDistance = d;\r\n            }\r\n            // End\r\n            d = navPoly.centroid.distance(endVector);\r\n            if (d <= endDistance && d <= r && navPoly.contains(endVector)) {\r\n                endPoly = navPoly;\r\n                endDistance = d;\r\n            }\r\n        }\r\n        // If the end point wasn't inside a polygon, run a more liberal check that allows a point\r\n        // to be within meshShrinkAmount radius of a polygon\r\n        if (!endPoly && this.meshShrinkAmount > 0) {\r\n            for (const navPoly of this.navPolygons) {\r\n                r = navPoly.boundingRadius + this.meshShrinkAmount;\r\n                d = navPoly.centroid.distance(endVector);\r\n                if (d <= r) {\r\n                    const { distance } = this.projectPointToPolygon(endVector, navPoly);\r\n                    if (distance <= this.meshShrinkAmount && distance < endDistance) {\r\n                        endPoly = navPoly;\r\n                        endDistance = distance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // No matching polygons locations for the end, so no path found\r\n        // because start point is valid normally, check end point first\r\n        if (!endPoly)\r\n            return null;\r\n        // Same check as above, but for the start point\r\n        if (!startPoly && this.meshShrinkAmount > 0) {\r\n            for (const navPoly of this.navPolygons) {\r\n                // Check if point is within bounding circle to avoid extra projection calculations\r\n                r = navPoly.boundingRadius + this.meshShrinkAmount;\r\n                d = navPoly.centroid.distance(startVector);\r\n                if (d <= r) {\r\n                    // Check if projected point is within range of a polgyon and is closer than the\r\n                    // previous point\r\n                    const { distance } = this.projectPointToPolygon(startVector, navPoly);\r\n                    if (distance <= this.meshShrinkAmount && distance < startDistance) {\r\n                        startPoly = navPoly;\r\n                        startDistance = distance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // No matching polygons locations for the start, so no path found\r\n        if (!startPoly)\r\n            return null;\r\n        // If the start and end polygons are the same, return a direct path\r\n        if (startPoly === endPoly)\r\n            return [startVector, endVector];\r\n        // Search!\r\n        const astarPath = jsastar.astar.search(this.graph, startPoly, endPoly, {\r\n            heuristic: this.graph.navHeuristic,\r\n        });\r\n        // While the start and end polygons may be valid, no path between them\r\n        if (astarPath.length === 0)\r\n            return null;\r\n        // jsastar drops the first point from the path, but the funnel algorithm needs it\r\n        astarPath.unshift(startPoly);\r\n        // We have a path, so now time for the funnel algorithm\r\n        const channel = new Channel();\r\n        channel.push(startVector);\r\n        for (let i = 0; i < astarPath.length - 1; i++) {\r\n            const navPolygon = astarPath[i];\r\n            const nextNavPolygon = astarPath[i + 1];\r\n            // Find the portal\r\n            let portal = null;\r\n            for (let i = 0; i < navPolygon.neighbors.length; i++) {\r\n                if (navPolygon.neighbors[i].id === nextNavPolygon.id) {\r\n                    portal = navPolygon.portals[i];\r\n                }\r\n            }\r\n            if (!portal)\r\n                throw new Error(\"Path was supposed to be found, but portal is missing!\");\r\n            // Push the portal vertices into the channel\r\n            channel.push(portal.start, portal.end);\r\n        }\r\n        channel.push(endVector);\r\n        // Pull a string along the channel to run the funnel\r\n        channel.stringPull();\r\n        // Clone path, excluding duplicates\r\n        let lastPoint = null;\r\n        const phaserPath = [];\r\n        for (const p of channel.path) {\r\n            const newPoint = p.clone();\r\n            if (!lastPoint || !newPoint.equals(lastPoint))\r\n                phaserPath.push(newPoint);\r\n            lastPoint = newPoint;\r\n        }\r\n        return phaserPath;\r\n    }\r\n    calculateNeighbors() {\r\n        // Fill out the neighbor information for each navpoly\r\n        for (let i = 0; i < this.navPolygons.length; i++) {\r\n            const navPoly = this.navPolygons[i];\r\n            for (let j = i + 1; j < this.navPolygons.length; j++) {\r\n                const otherNavPoly = this.navPolygons[j];\r\n                // Check if the other navpoly is within range to touch\r\n                const d = navPoly.centroid.distance(otherNavPoly.centroid);\r\n                if (d > navPoly.boundingRadius + otherNavPoly.boundingRadius)\r\n                    continue;\r\n                // The are in range, so check each edge pairing\r\n                for (const edge of navPoly.edges) {\r\n                    for (const otherEdge of otherNavPoly.edges) {\r\n                        // If edges aren't collinear, not an option for connecting navpolys\r\n                        if (!areCollinear(edge, otherEdge))\r\n                            continue;\r\n                        // If they are collinear, check if they overlap\r\n                        const overlap = this.getSegmentOverlap(edge, otherEdge);\r\n                        if (!overlap)\r\n                            continue;\r\n                        // Connections are symmetric!\r\n                        navPoly.neighbors.push(otherNavPoly);\r\n                        otherNavPoly.neighbors.push(navPoly);\r\n                        // Calculate the portal between the two polygons - this needs to be in\r\n                        // counter-clockwise order, relative to each polygon\r\n                        const [p1, p2] = overlap;\r\n                        let edgeStartAngle = navPoly.centroid.angle(edge.start);\r\n                        let a1 = navPoly.centroid.angle(overlap[0]);\r\n                        let a2 = navPoly.centroid.angle(overlap[1]);\r\n                        let d1 = angleDifference(edgeStartAngle, a1);\r\n                        let d2 = angleDifference(edgeStartAngle, a2);\r\n                        if (d1 < d2) {\r\n                            navPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n                        }\r\n                        else {\r\n                            navPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n                        }\r\n                        edgeStartAngle = otherNavPoly.centroid.angle(otherEdge.start);\r\n                        a1 = otherNavPoly.centroid.angle(overlap[0]);\r\n                        a2 = otherNavPoly.centroid.angle(overlap[1]);\r\n                        d1 = angleDifference(edgeStartAngle, a1);\r\n                        d2 = angleDifference(edgeStartAngle, a2);\r\n                        if (d1 < d2) {\r\n                            otherNavPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n                        }\r\n                        else {\r\n                            otherNavPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n                        }\r\n                        // Two convex polygons shouldn't be connected more than once! (Unless\r\n                        // there are unnecessary vertices...)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Check two collinear line segments to see if they overlap by sorting the points.\r\n    // Algorithm source: http://stackoverflow.com/a/17152247\r\n    getSegmentOverlap(line1, line2) {\r\n        const points = [\r\n            { line: line1, point: line1.start },\r\n            { line: line1, point: line1.end },\r\n            { line: line2, point: line2.start },\r\n            { line: line2, point: line2.end },\r\n        ];\r\n        points.sort(function (a, b) {\r\n            if (a.point.x < b.point.x)\r\n                return -1;\r\n            else if (a.point.x > b.point.x)\r\n                return 1;\r\n            else {\r\n                if (a.point.y < b.point.y)\r\n                    return -1;\r\n                else if (a.point.y > b.point.y)\r\n                    return 1;\r\n                else\r\n                    return 0;\r\n            }\r\n        });\r\n        // If the first two points in the array come from the same line, no overlap\r\n        const noOverlap = points[0].line === points[1].line;\r\n        // If the two middle points in the array are the same coordinates, then there is a\r\n        // single point of overlap.\r\n        const singlePointOverlap = points[1].point.equals(points[2].point);\r\n        if (noOverlap || singlePointOverlap)\r\n            return null;\r\n        else\r\n            return [points[1].point, points[2].point];\r\n    }\r\n    /**\r\n     * Project a point onto a polygon in the shortest distance possible.\r\n     *\r\n     * @param {Phaser.Point} point The point to project\r\n     * @param {NavPoly} navPoly The navigation polygon to test against\r\n     * @returns {{point: Phaser.Point, distance: number}}\r\n     */\r\n    projectPointToPolygon(point, navPoly) {\r\n        let closestProjection = null;\r\n        let closestDistance = Number.MAX_VALUE;\r\n        for (const edge of navPoly.edges) {\r\n            const projectedPoint = projectPointToEdge(point, edge);\r\n            const d = point.distance(projectedPoint);\r\n            if (closestProjection === null || d < closestDistance) {\r\n                closestDistance = d;\r\n                closestProjection = projectedPoint;\r\n            }\r\n        }\r\n        return { point: closestProjection, distance: closestDistance };\r\n    }\r\n}\r\n","import jsastar from \"javascript-astar\";\r\n/**\r\n * Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\r\n * repo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavGraph\r\n * @private\r\n */\r\nclass NavGraph {\r\n    constructor(navPolygons) {\r\n        this.grid = [];\r\n        this.init = jsastar.Graph.prototype.init.bind(this);\r\n        this.cleanDirty = jsastar.Graph.prototype.cleanDirty.bind(this);\r\n        this.markDirty = jsastar.Graph.prototype.markDirty.bind(this);\r\n        this.toString = jsastar.Graph.prototype.toString.bind(this);\r\n        this.nodes = navPolygons;\r\n        this.init();\r\n    }\r\n    neighbors(navPolygon) {\r\n        return navPolygon.neighbors;\r\n    }\r\n    navHeuristic(navPolygon1, navPolygon2) {\r\n        return navPolygon1.centroidDistance(navPolygon2);\r\n    }\r\n    destroy() {\r\n        this.cleanDirty();\r\n        this.nodes = [];\r\n    }\r\n}\r\nexport default NavGraph;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(636);\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"sourceRoot":""}