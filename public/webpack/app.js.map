{"version":3,"file":"app.js","mappings":";;;;;AAAA,qEAAqE,kBAAkB,gBAAgB,yBAAyB;AAChI;AACA,iBAAiB;AACjB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,8CAA8C;AACxG,oDAAoD,8CAA8C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,4BAA4B;AACvG;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,gDAAgD;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,4BAA4B;AACzF;AACA;AACA,KAAK;AACL;AACA;AACA,6DAA6D,4BAA4B;AACzF;AACA;AACA,KAAK;AACL;AACA;AACA,6DAA6D,4BAA4B;AACzF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0DAA0D,4BAA4B;AACtF;AACA;AACA,KAAK;AACL;AACA;AACA,0DAA0D,4BAA4B;AACtF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,C","sources":["webpack://gajwa-playground/./public/rebuild.js"],"sourcesContent":["console.log(\"%c@ MYZY.SPACE 2021 POWERED BY MYZY_\", \"color: #00ff00; font-weight: 900; font-size: 1em; background-color: black; padding: 1rem\");\r\nconst font = new FontFaceObserver('dgm').load();\r\nconst display = {width : 320, height: 640, centerW : 180, centerH: 340 };\r\nconst fontConfig = {font: '32px \"dgm\"', color: '#fff'};\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: display.width,\r\n    height: display.height,\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            //debug: true\r\n        }\r\n    },\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    },\r\n    parent: 'canvas',\r\n    pixelArt: true,\r\n    plugins: {\r\n        scene: [\r\n            {\r\n                key: \"PhaserNavMeshPlugin\", // Key to store the plugin class under in cache\r\n                plugin: PhaserNavMeshPlugin, // Class that constructs plugins\r\n                mapping: \"navMeshPlugin\", // Property mapping to use for the scene, e.g. this.navMeshPlugin\r\n                start: true\r\n            },\r\n        ]\r\n    }\r\n};\r\nconst game = new Phaser.Game(config);\r\nconst mainObject = {\r\n    player : 'main player',\r\n    dom : 'dom'\r\n};\r\nconst mainConfig = {\r\n    playerTarget : {x: 0, y: 0},\r\n    playerCount : 0,\r\n    playerPath : [],\r\n    domTarget : {x: 0, y: 0},\r\n    domCount : 0,\r\n    domPath : []\r\n}\r\nconst maps = {};\r\nconst debug = {};\r\n\r\nfunction preload() {\r\n    this.load.tilemapTiledJSON(\"map\", \"map/newmap.json\");\r\n    this.load.image(\"tileset\", \"map/set.png\");\r\n\r\n    this.load.spritesheet('player', 'image/player.png', { frameWidth: 32, frameHeight: 32, endFrame: 7 });\r\n    this.load.spritesheet('dom', 'image/dom.png', { frameWidth: 32, frameHeight: 32, endFrame: 7 });\r\n}\r\nfunction create() {\r\n\r\n    setAnims(this);\r\n    createGraphics(this);\r\n    createCharacters(this);\r\n    buildMap(this);\r\n    setLayer(this);\r\n\r\n    this.input.on(\"pointerdown\", pointer => {\r\n        mainConfig.playerCount = 1;\r\n        mainConfig.playerPath = maps.navMesh.findPath(mainObject.player, { x: pointer.x, y: pointer.y });\r\n        if(mainConfig.playerPath === null || mainConfig.playerPath.length < 1) return;\r\n        moveCharacter(mainObject.player);\r\n        //path_log();\r\n    });\r\n}\r\nfunction update() {\r\n    let dis = {\r\n        player: Phaser.Math.Distance.Between(mainObject.player.x, mainObject.player.y, mainConfig.playerTarget.x, mainConfig.playerTarget.y),\r\n        dom: Phaser.Math.Distance.Between(mainObject.dom.x, mainObject.dom.y, mainConfig.domTarget.x, mainConfig.domTarget.y),\r\n        each: Phaser.Math.Distance.Between(mainObject.player.x, mainObject.player.y, mainObject.dom.x, mainObject.dom.y),\r\n    }\r\n    \r\n    if (mainObject.player.body.speed > 0){\r\n        if (dis.player < 4){\r\n            if(mainConfig.playerPath === null || mainConfig.playerPath.length < 1 || mainConfig.playerPath.length === mainConfig.playerCount + 1) {\r\n                mainObject.player.body.reset(mainObject.player.x, mainObject.player.y);\r\n                if(mainObject.player.anims.currentAnim.key !== 'player-stand') mainObject.player.play('player-stand');\r\n            }\r\n            else {\r\n                mainConfig.playerCount++;\r\n                moveCharacter(mainObject.player);\r\n            }\r\n        }\r\n        if(dis.each > 80){\r\n            mainConfig.domCount = 1;\r\n            mainConfig.domPath = maps.navMesh.findPath(mainObject.dom, { x: mainObject.player.x, y: mainObject.player.y });\r\n            moveCharacter(mainObject.dom);\r\n        }\r\n    }\r\n    if (mainObject.dom.body.speed > 0){\r\n        if (dis.dom < 4){\r\n            if(mainConfig.domPath === null || mainConfig.domPath.length < 1 || mainConfig.domPath.length === mainConfig.domCount + 1) {\r\n                mainObject.dom.body.reset(mainObject.dom.x, mainObject.dom.y);\r\n                if(mainObject.dom.anims.currentAnim.key !== 'dom-stand') mainObject.dom.play('dom-stand');\r\n            }\r\n            else {\r\n                mainConfig.domCount++;\r\n                moveCharacter(mainObject.dom);\r\n            }\r\n\r\n        }\r\n        else if(dis.each < 40){\r\n            mainObject.dom.body.reset(mainObject.dom.x, mainObject.dom.y);\r\n            if(mainObject.dom.anims.currentAnim.key !== 'dom-stand') mainObject.dom.play('dom-stand');\r\n        }\r\n    }\r\n    mainObject.group.list.sort(function(a, b) {\r\n        return a.y > b.y ? 1 : -1;\r\n    });\r\n\r\n}\r\n\r\n// TODO 오브젝트 생성\r\nfunction buildMap(scene) {\r\n    // 타일맵 생성 <br>\r\n    // 네비메쉬 : maps.navMesh <br>\r\n    // 벽 레이어 : maps.wallLayer\r\n    maps.tilemap = scene.add.tilemap(\"map\");\r\n    maps.tileset = maps.tilemap.addTilesetImage(\"tileset\", \"tileset\");\r\n    maps.tilemap.createStaticLayer(\"bg\", maps.tileset);\r\n    maps.wallLayer = maps.tilemap.createLayer(\"walls\", maps.tileset);\r\n    maps.objectLayer = maps.tilemap.getObjectLayer(\"navmesh\");\r\n    maps.navMesh = scene.navMeshPlugin.buildMeshFromTiled(\"mesh\", maps.objectLayer, 12.5);\r\n}\r\nfunction createCharacters(scene) {\r\n    // 메인 캐릭터 생성 <br>\r\n    // 플레이어 오브젝트 : mainObject.player\r\n    mainObject.player = scene.physics.add.sprite(display.centerW, 180, 'player')\r\n        .setOrigin(0.5, 1).setScale(2).setSize(16, 16).setOffset(8, 16).play('player-stand');\r\n    mainObject.dom = scene.physics.add.sprite(display.centerW - 60, 180, 'dom')\r\n        .setOrigin(0.5, 1).setScale(2).setSize(16, 16).setOffset(8, 16).play('dom-stand');\r\n}\r\nfunction createGraphics(scene) {\r\n    // 디버그를 위한 그래픽 생성\r\n    debug.graphics = scene.add.graphics();\r\n    debug.graphics.lineStyle(1, 0x00ff00, 1);\r\n    debug.graphics.fillStyle( 0xff0000, 1);\r\n}\r\nfunction setLayer(scene) {\r\n    // 레이어 및 그룹 오브젝트 생성\r\n    mainObject.layer = scene.add.layer();\r\n    mainObject.group = scene.add.container();\r\n    mainObject.group.add([mainObject.player, mainObject.dom]);\r\n\r\n    // 레이어 정렬\r\n    mainObject.layer.add(mainObject.group);\r\n}\r\nfunction setAnims(scene) {\r\n    // TODO: 애니메이션 추가\r\n    scene.anims.create({\r\n        key: 'player-stand',\r\n        frames: scene.anims.generateFrameNumbers('player', { start: 0, end: 1, first: 0 }),\r\n        frameRate: 2,\r\n        repeat: -1\r\n    });\r\n    scene.anims.create({\r\n        key: 'player-seek',\r\n        frames: scene.anims.generateFrameNumbers('player', { start: 2, end: 3, first: 0 }),\r\n        frameRate: 2,\r\n        repeat: -1\r\n    });\r\n    scene.anims.create({\r\n        key: 'player-run',\r\n        frames: scene.anims.generateFrameNumbers('player', { start: 4, end: 7, first: 0 }),\r\n        frameRate: 8,\r\n        repeat: -1\r\n    });\r\n\r\n    scene.anims.create({\r\n        key: 'dom-stand',\r\n        frames: scene.anims.generateFrameNumbers('dom', { start: 0, end: 1, first: 0 }),\r\n        frameRate: 4,\r\n        repeat: -1\r\n    });\r\n    scene.anims.create({\r\n        key: 'dom-run',\r\n        frames: scene.anims.generateFrameNumbers('dom', { start: 4, end: 7, first: 0 }),\r\n        frameRate: 8,\r\n        repeat: -1\r\n    });\r\n}\r\n\r\nfunction Move(character, target, speed) {\r\n    game.scene.scenes[0].physics.moveToObject(character, target, speed);\r\n}\r\nfunction moveCharacter(character) {\r\n    if(character === mainObject.player){\r\n        mainConfig.playerTarget.x = mainConfig.playerPath[mainConfig.playerCount].x;\r\n        mainConfig.playerTarget.y = mainConfig.playerPath[mainConfig.playerCount].y;\r\n        if(character.anims.currentAnim.key !== 'player-run') character.play('player-run');\r\n        mainObject.player.setFlipX(mainObject.player.x - mainConfig.playerTarget.x > 0);\r\n        Move(mainObject.player, mainConfig.playerTarget, 160);\r\n    }\r\n    else if(character === mainObject.dom){\r\n        mainConfig.domTarget.x = mainConfig.domPath[mainConfig.domCount].x;\r\n        mainConfig.domTarget.y = mainConfig.domPath[mainConfig.domCount].y;\r\n        if(character.anims.currentAnim.key !== 'dom-run') character.play('dom-run');\r\n        mainObject.dom.setFlipX(mainObject.dom.x - mainConfig.domTarget.x > 0);\r\n        Move(mainObject.dom, mainConfig.domTarget, 160);\r\n    }\r\n\r\n}\r\nfunction path_log() {\r\n    debug.graphics.clear();\r\n    if(mainConfig.playerPath === null) {\r\n        return;\r\n    }\r\n    let line = new Phaser.Curves.Path(mainObject.player.x, mainObject.player.y);\r\n    for (var i = 0; i < mainConfig.playerPath.length; i++)\r\n    {\r\n        line.lineTo(mainConfig.playerPath[i].x, mainConfig.playerPath[i].y);\r\n        debug.graphics.fillRect(mainConfig.playerPath[i].x - 4, mainConfig.playerPath[i].y - 4, 8, 8);\r\n    }\r\n    debug.graphics.lineStyle(1, 0xff0000, 1);\r\n    line.draw(debug.graphics);\r\n}"],"names":[],"sourceRoot":""}