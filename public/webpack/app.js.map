{"version":3,"file":"app.js","mappings":";;;;;AAAA,qEAAqE,kBAAkB,gBAAgB,yBAAyB;AAChI;AACA,iBAAiB;AACjB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA,aAAa,wCAAwC;AACrD,wBAAwB,wCAAwC;AAChE;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,8CAA8C;AACpG;AACA,0DAA0D,8CAA8C;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,4BAA4B;AACvG;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0CAA0C;AAC5D,oBAAoB;AACpB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,4BAA4B;AACvF;AACA;AACA,KAAK;AACL;AACA;AACA,6DAA6D,4BAA4B;AACzF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,YAAY,OAAO,gDAAgD,IAAI,YAAY;AAC3K;AACA;AACA;AACA;AACA;AACA,kFAAkF,YAAY,OAAO,0CAA0C,IAAI,YAAY;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C","sources":["webpack://gajwa-playground/./public/rebuild.js"],"sourcesContent":["console.log(\"%c@ MYZY.SPACE 2021 POWERED BY MYZY_\", \"color: #00ff00; font-weight: 900; font-size: 1em; background-color: black; padding: 1rem\");\r\nconst font = new FontFaceObserver('dgm').load();\r\nconst display = {width : 320, height: 640, centerW : 160, centerH: 320 };\r\nconst fontConfig = {font: '32px \"dgm\"', color: '#fff'};\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: display.width,\r\n    height: display.height,\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            //debug: true\r\n        }\r\n    },\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    },\r\n    parent: 'canvas',\r\n    pixelArt: true,\r\n    plugins: {\r\n        scene: [\r\n            {\r\n                key: \"PhaserNavMeshPlugin\", // Key to store the plugin class under in cache\r\n                plugin: PhaserNavMeshPlugin, // Class that constructs plugins\r\n                mapping: \"navMeshPlugin\", // Property mapping to use for the scene, e.g. this.navMeshPlugin\r\n                start: true\r\n            },\r\n        ]\r\n    }\r\n};\r\nconst game = new Phaser.Game(config);\r\nconst mainObject = {\r\n    player : 'main player',\r\n    dom : 'dom'\r\n};\r\nconst object = {};\r\n// TODO 설정\r\nconst mainConfig = {\r\n    debugMode : true,\r\n\r\n    playerTarget : {x: 0, y: 0},\r\n    playerCount : 0,\r\n    playerPath : [],\r\n    playerMovable : false,\r\n    // 이동 후 바라볼 오브젝트\r\n    lookAt: {player: null, dom: null, engineer: null},\r\n    moveFinishedEvent: {player: null, dom: null, engineer: null},\r\n\r\n    domTarget : {x: 0, y: 0},\r\n    domCount : 0,\r\n    domPath : [],\r\n    domFollow: false,\r\n\r\n    // ui 설정\r\n    titleFadeOut : null,\r\n\r\n    // game 설정\r\n    pcTimerPushed : false,\r\n    pcTimer : 0,\r\n    pcCrackCount : 0,\r\n    clear : [false, false, false, false, false]\r\n}\r\nconst timer = {};\r\nconst event = {};\r\nconst maps = {};\r\nconst ui = {};\r\nconst line = {};\r\nconst debug = {};\r\nconst status = {\r\n    scene: 'title',\r\n    index: 0,\r\n    chapterIdx: 0,\r\n    taskIdx: 0\r\n};\r\n\r\nfunction preload() {\r\n    // TODO 프리로드\r\n    // data\r\n    this.load.json('text', 'data/text.json');\r\n    // tile\r\n    this.load.tilemapTiledJSON(\"map\", \"map/newmap.json\");\r\n    this.load.image(\"tileset\", \"map/set.png\");\r\n    // sprites\r\n    this.load.aseprite('character', 'image/character.png', 'image/character.json');\r\n    this.load.atlas('obj', 'image/obj.png', 'image/obj.json');\r\n    // UI\r\n    this.load.image('transition', 'image/transition0.png');\r\n    this.load.image('nineslice', 'image/nineslice.png');\r\n    this.load.image('nineslice-task', 'image/nineslice-task.png');\r\n    this.load.spritesheet('mark', 'image/mark.png', { frameWidth: 32, frameHeight: 32, endFrame: 1 });\r\n    this.load.image(\"pc\", \"image/pc.png\");\r\n    this.load.spritesheet('pc-err', 'image/pc-err.png', { frameWidth: 96, frameHeight: 80, endFrame: 5 });\r\n    this.load.atlas('keyboard', 'image/keyboard.png', 'image/keyboard.json');\r\n    // plugins\r\n    this.load.plugin('rexninepatchplugin', 'rexninepatchplugin.min.js', true);\r\n    // particle\r\n    this.load.atlas(\"leaf\", \"image/leaf.png\", 'image/leaf.json');\r\n}\r\nfunction create() {\r\n    setLines(this);\r\n    setAnimations(this);\r\n    createGraphics(this);\r\n    createUIObjects(this);\r\n    createCharacters(this);\r\n    createObjects(this);\r\n    createParticles(this);\r\n    buildMap(this);\r\n    setLayer(this);\r\n    this.input.on('pointerup', pointer => {\r\n        if(!mainConfig.playerMovable) return;\r\n        mainConfig.playerCount = 1;\r\n        mainConfig.playerPath = maps.navMesh.findPath(mainObject.player, { x: pointer.x, y: pointer.y });\r\n        if(mainConfig.playerPath === null || mainConfig.playerPath.length < 1) return;\r\n        moveCharacter(mainObject.player);\r\n        //path_log();\r\n    });\r\n}\r\nfunction update() {\r\n    // TODO 업데이트 프레임\r\n    let dis = {\r\n        player: Phaser.Math.Distance.Between(mainObject.player.x, mainObject.player.y, mainConfig.playerTarget.x, mainConfig.playerTarget.y),\r\n        dom: Phaser.Math.Distance.Between(mainObject.dom.x, mainObject.dom.y, mainConfig.domTarget.x, mainConfig.domTarget.y),\r\n        each: Phaser.Math.Distance.Between(mainObject.player.x, mainObject.player.y, mainObject.dom.x, mainObject.dom.y),\r\n    }\r\n    if (mainObject.player.body.speed > 0){\r\n        if (dis.player < 4){\r\n            // 목적지 도착시 플레이어 정지\r\n            if(mainConfig.playerPath === null || mainConfig.playerPath.length < 1 || mainConfig.playerPath.length === mainConfig.playerCount + 1) {\r\n                mainObject.player.body.reset(mainObject.player.x, mainObject.player.y);\r\n                if(mainObject.player.anims.currentAnim.key !== 'player-stand') mainObject.player.play('player-stand');\r\n                moveFinished(mainObject.player);\r\n            }\r\n            // 다음 경로로 변경\r\n            else {\r\n                mainConfig.playerCount++;\r\n                moveCharacter(mainObject.player);\r\n            }\r\n        }\r\n        // 플레이어와 멀때 따라가기 경로\r\n        if(dis.each > 80 && mainConfig.domFollow){\r\n            moveToPoint(mainObject.dom, mainObject.player.x, mainObject.player.y, true);\r\n        }\r\n    }\r\n    if (mainObject.dom.body.speed > 0){\r\n        if (dis.dom < 4){\r\n            // 목적지 도착시 정지\r\n            if(mainConfig.domPath === null || mainConfig.domPath.length < 1 || mainConfig.domPath.length === mainConfig.domCount + 1) {\r\n                mainObject.dom.body.reset(mainObject.dom.x, mainObject.dom.y);\r\n                if(mainObject.dom.anims.currentAnim.key !== 'dom-stand') mainObject.dom.play('dom-stand');\r\n                moveFinished(mainObject.dom);\r\n            }\r\n            // 다음 경로로 변경\r\n            else {\r\n                mainConfig.domCount++;\r\n                moveCharacter(mainObject.dom);\r\n            }\r\n        }\r\n        // 플레이어와 가까울때 정지\r\n        else if(dis.each < 40 && mainConfig.domFollow){\r\n            mainObject.dom.body.reset(mainObject.dom.x, mainObject.dom.y);\r\n            if(mainObject.dom.anims.currentAnim.key !== 'dom-stand') mainObject.dom.play('dom-stand');\r\n\r\n        }\r\n    }\r\n    // 레이어 순서 정렬\r\n    mainObject.group.list.sort(function(a, b) {\r\n        return a.y > b.y ? 1 : -1;\r\n    });\r\n    if(mainConfig.pcTimerPushed && !mainConfig.clear[0]) mainConfig.pcTimer++;\r\n    if(mainConfig.pcTimer > 140) {\r\n        mainConfig.pcTimerPushed = false;\r\n        mainConfig.pcTimer = 0;\r\n        pcShutDown('power');\r\n    }\r\n}\r\n\r\n// TODO 오브젝트 생성\r\nfunction buildMap(scene) {\r\n    // 타일맵 생성 <br>\r\n    // 네비메쉬 : maps.navMesh <br>\r\n    // 벽 레이어 : maps.wallLayer\r\n    maps.tilemap = scene.add.tilemap(\"map\");\r\n    maps.tileset = maps.tilemap.addTilesetImage(\"tileset\", \"tileset\");\r\n    maps.tilemap.createLayer(\"bg\", maps.tileset);\r\n    maps.wallLayer = [];\r\n    maps.wallLayer[0] = maps.tilemap.createLayer(\"display0\", maps.tileset).setVisible(true);\r\n    maps.wallLayer[1] = maps.tilemap.createLayer(\"display1\", maps.tileset).setVisible(false);\r\n\r\n    maps.objectLayer = [];\r\n    maps.objectLayer[0] = maps.tilemap.getObjectLayer(\"0\");\r\n    maps.objectLayer[1] = maps.tilemap.getObjectLayer(\"1\");\r\n\r\n    maps.navMesh = scene.navMeshPlugin.buildMeshFromTiled(\"mesh\", maps.objectLayer[0], 12.5);\r\n}\r\nfunction createCharacters(scene) {\r\n    // 메인 캐릭터 생성 <br>\r\n    // 플레이어 오브젝트 : mainObject.player\r\n    mainConfig.anims = scene.anims.createFromAseprite('character');\r\n    let chracterData = scene.cache.json.get('character').meta.frameTags;\r\n    for (let i = 0; i < chracterData.length; i++) {\r\n        if(chracterData[i].repeat === undefined) mainConfig.anims[i].repeat = -1;\r\n        else mainConfig.anims[i].repeat = chracterData[i].repeat;\r\n        if(chracterData[i].frameRate === undefined) mainConfig.anims[i].frameRate = 2;\r\n        else mainConfig.anims[i].frameRate = chracterData[i].frameRate;\r\n    }\r\n\r\n    mainObject.player = scene.physics.add.sprite(display.centerW, 180)\r\n        .setOrigin(0.5, 1).setScale(2).setSize(16, 16).setOffset(8, 16).play('player-stand');\r\n    mainObject.dom = scene.physics.add.sprite(display.centerW - 60, 180)\r\n        .setOrigin(0.5, 1).setScale(2).setSize(16, 16).setOffset(8, 16).play('dom-stand').setVisible(false);\r\n    mainObject.engineer = scene.physics.add.sprite(display.centerW, display.centerH + 80)\r\n        .setOrigin(0.5, 1).setScale(2).setSize(16, 16).setOffset(8, 16).play('en-stand').setVisible(false);\r\n    mainObject.man = scene.physics.add.sprite(display.centerW + 80, 180).play('man-stand')\r\n        .setOrigin(0.5, 1).setScale(2).setSize(16, 16).setOffset(8, 16).setVisible(false);\r\n}\r\nfunction createGraphics(scene) {\r\n    // TODO 그래픽 생성\r\n    // 디버그 그래픽\r\n    debug.graphics = scene.add.graphics();\r\n    debug.graphics.lineStyle(1, 0x00ff00, 1);\r\n    debug.graphics.fillStyle( 0xff0000, 1);\r\n}\r\nfunction createUIObjects(scene) {\r\n    // TODO UI 오브젝트 생성\r\n    ui.cam = scene.cameras.main;\r\n    ui.skip = scene.add.rectangle(display.centerW, display.centerH, display.width, display.height, 0x00ff00, 0)\r\n        .setInteractive();\r\n    ui.white = scene.add.rectangle(display.centerW, display.centerH, display.width, display.height, 0xffffff);\r\n    ui.background = scene.add.rectangle(display.centerW, display.centerH, display.width, display.height, 0x000000);\r\n    ui.title = scene.add.sprite(display.centerW, 180, 'obj', 'title').setOrigin(0.5).setScale(2);\r\n    ui.largeText = scene.add.text(display.centerW, display.centerH, '', fontConfig)\r\n        .setAlign('center').setOrigin(0.5).setVisible(false);\r\n    ui.mark = scene.add.sprite(display.centerW - 60, 180, 'mark').play('mark')\r\n        .setOrigin(0.5, 1).setScale(2).setVisible(false);\r\n\r\n    ui.next = scene.add.rectangle(display.centerW, display.height - 30, display.width, 60, 0x00ff00).setVisible(false);\r\n    scene.physics.add.existing(ui.next);\r\n\r\n    // 미니게임 창 생성\r\n    ui.gameGroup = scene.add.container();\r\n    ui.gameBackground = scene.add.rectangle(display.centerW, display.centerH, display.width, display.height, 0x000000);\r\n    ui.gameTransitionUp = scene.add.sprite(display.centerW, 0, 'transition').setOrigin(0.5, 1).setFlipY(true).setScale(2);\r\n    ui.gameTransitionDown = scene.add.sprite(display.centerW, display.height, 'transition').setOrigin(0.5, 0).setScale(2);\r\n    ui.pc = scene.add.sprite(display.centerW, display.centerH, 'pc').setOrigin(0.5).setScale(2);\r\n    ui.pcOff = scene.add.rectangle(display.centerW, display.centerH - 137, 188, 158, 0xffffff).setVisible(false);\r\n    ui.pcErr = scene.add.sprite(display.centerW, display.centerH - 136).play('pc-err').setOrigin(0.5).setScale(2);\r\n    ui.pcDown = scene.add.sprite(display.centerW, display.centerH - 136, 'keyboard', 'down').setOrigin(0.5).setScale(2).setVisible(false);\r\n    ui.pcCrack = scene.add.sprite(display.centerW - 62, display.centerH + 60, 'keyboard', 'crack0').setOrigin(1).setScale(2).setVisible(false);\r\n    ui.pcBreak = scene.add.rectangle(display.centerW - 16, display.centerH + 48, 210, 100, 0x0000f00, 0).setInteractive().on('pointerup', pointer => {\r\n        createParts(pointer.x, pointer.y, RandomPlusMinus() * 200, -100 + Math.random() * -400);\r\n    });\r\n    ui.pcPw = scene.add.container();\r\n    ui.pcPwList = [];\r\n    ui.pcInfo = '';\r\n    for (let i = 0; i < 4; i++) {\r\n        ui.pcPwList[i] = scene.add.text(92.5 + i * 36, 168, '*', fontConfig).setFontSize(48).setVisible(false);\r\n    }\r\n    ui.pcPw.add(ui.pcPwList);\r\n    ui.keyboard = scene.add.container();\r\n    function setKeyboard() {\r\n        let keys = [];\r\n        let pos = {x: 0, y: 0};\r\n        for (let i = 0; i < 14; i++) {\r\n            let index = null;\r\n            if(i === 10){\r\n                index = 'enter-';\r\n                pos.x = 238;\r\n                pos.y = 514;\r\n            }\r\n            else if(i === 11){\r\n                index = 'esc-';\r\n                pos.x = 38;\r\n                pos.y = 482;\r\n            }\r\n            else if(i === 12){\r\n                index = 'danger-';\r\n                pos.x = 38;\r\n                pos.y = 540;\r\n            }\r\n            else if(i === 13){\r\n                index = 'power-';\r\n                pos.x = 254;\r\n                pos.y = 340;\r\n            }\r\n            else{\r\n                index = i;\r\n                pos.x = 38 + (i * 20);\r\n                pos.y = 510;\r\n            }\r\n            keys[i] = scene.add.sprite(pos.x, pos.y, 'keyboard', index + 't').setScale(2).setInteractive();\r\n            keys[i].on('pointerdown', function () {\r\n                this.setTexture('keyboard', index + 'f');\r\n                if(index === 'power-') {\r\n                    mainConfig.pcTimerPushed = true;\r\n                    mainConfig.pcTimer = 0;\r\n                }\r\n            });\r\n            keys[i].on('pointerup', function () {\r\n                this.setTexture('keyboard', index + 't');\r\n                keyboardAction(index);\r\n                if(index === 'power-') mainConfig.pcTimerPushed = false;\r\n            });\r\n            keys[i].on('pointerout', function () {\r\n                this.setTexture('keyboard', index + 't');\r\n                if(index === 'power-') mainConfig.pcTimerPushed = false;\r\n            });\r\n        }\r\n        ui.keyboard.add(keys);\r\n        }\r\n    setKeyboard();\r\n\r\n    // 클릭 효과 생성\r\n    ui.pcParts = scene.physics.add.group({\r\n        visible: false,\r\n        active: false,\r\n        frameQuantity: 10,\r\n        maxSize: 10\r\n    });\r\n    ui.effectGroup = scene.add.container();\r\n    ui.bottom = scene.add.rectangle(display.centerW, display.height + 80, 4000, 10, 0x000000, 0);\r\n    scene.physics.add.overlap(ui.bottom, ui.pcParts, disableParts, null, this);\r\n    scene.physics.add.existing(ui.bottom);\r\n    ui.effectGroup.add(ui.bottom);\r\n    function disableParts(bottom, parts) {\r\n        // 떨어진 나사 제거\r\n        parts.disableBody(true, true);\r\n    }\r\n    ui.gameGroup.add([ui.gameBackground, ui.pc, ui.pcCrack, ui.keyboard, ui.pcErr, ui.pcPw, ui.pcDown, ui.pcOff, ui.pcBreak, ui.gameTransitionDown, ui.gameTransitionUp]).setVisible(false);\r\n    ui.dialogGroup = scene.add.container();\r\n    ui.dialogBox = scene.add.rexNinePatch({\r\n        x: display.centerW, y: display.height - 10,\r\n        width: (display.width - 20) * 0.5, height: 180 * 0.5,\r\n        key: 'nineslice',\r\n        columns: [8, undefined, 8],\r\n        rows: [8, undefined, 8],\r\n    }).setOrigin(0.5, 1).setScale(2);\r\n    ui.dialog = scene.add.text(30, display.height - 160, '', fontConfig).setFontSize(16).setLineSpacing(4);\r\n    ui.dialogGroup.add([ui.dialogBox, ui.dialog]).setVisible(false);\r\n    ui.taskGroup = scene.add.container();\r\n    ui.task = scene.add.text(42, 34, '', fontConfig).setFontSize(16).setLineSpacing(4);\r\n    ui.taskBox = scene.add.rexNinePatch({\r\n        x: display.centerW, y: 64,\r\n        width: (display.width - 20) * 0.5, height: 32,\r\n        key: 'nineslice-task',\r\n        columns: [15, undefined, 15],\r\n        rows: [0, undefined, 0],\r\n    }).setOrigin(0.5, 1).setScale(2);\r\n    ui.taskGroup.add([ui.taskBox, ui.task]);\r\n    ui.taskGroup.y = -64;\r\n\r\n    ui.skip.on('pointerup', function () {\r\n        skip();\r\n    });\r\n}\r\nfunction setTask(visible) {\r\n    let scene = game.scene.scenes[0];\r\n    let pos;\r\n    let ease;\r\n    if (visible){\r\n        pos = 0;\r\n        ease = Phaser.Math.Easing.Quintic.Out;\r\n        ui.task.text = line.task[status.chapterIdx][status.taskIdx];\r\n        status.taskIdx++;\r\n    }\r\n    else {\r\n        ease = Phaser.Math.Easing.Quintic.In;\r\n        pos = -64;\r\n    }\r\n\r\n    scene.tweens.add({\r\n        targets: ui.taskGroup,\r\n        y: pos,\r\n        duration: 1200,\r\n        ease: ease\r\n    });\r\n}\r\nfunction createParticles(scene) {\r\n    // 파티클 생성\r\n    let emitZone = new Phaser.Geom.Rectangle(-200, -600, 200, 1200);\r\n    mainObject.particles = scene.add.particles('obj', 'particle');\r\n    let emitter = mainObject.particles.createEmitter({\r\n        x: 0,\r\n        y: 0,\r\n        speed: 80,\r\n        gravityX: 120,\r\n        gravityY: 120,\r\n        lifespan: 6000,\r\n        quantity: 0.5,\r\n        scale: 2,\r\n        emitZone: { source: emitZone }\r\n    });\r\n    let titlezone = new Phaser.Geom.Rectangle(0, -60, display.width, 10);\r\n\r\n    mainObject.TitleParticle = scene.add.particles('leaf');\r\n    mainObject.TitleEmitter = mainObject.TitleParticle.createEmitter({\r\n        frame: [ '0', '1', '2', '3'],\r\n        x: 0,\r\n        y: 0,\r\n        speed: 60,\r\n        gravityX: 0,\r\n        gravityY: 60,\r\n        lifespan: 6000,\r\n        quantity: 1,\r\n        frequency: 400,\r\n        scale: 2,\r\n        rotate: { start: 0, end: 360, ease: 'Back.easeOut' },\r\n        emitZone: { source: titlezone }\r\n    });\r\n}\r\nfunction createObjects(scene) {\r\n    // 기타 오브젝트 생성\r\n    object.list = [];\r\n    object.list[0] = scene.add.sprite(0, 336, 'obj', 'rock').setScale(2).setOrigin(0, 1);\r\n    object.list[1] = scene.add.sprite(display.width - 80, 368, 'obj', 'rock').setScale(2).setOrigin(0, 1);\r\n    object.list[2] = scene.add.sprite(96, 368, 'obj', 'pc').setScale(2).setOrigin(0, 1).setVisible(false);\r\n\r\n}\r\nfunction setLayer(scene) {\r\n    // TODO 레이어 및 그룹 오브젝트 생성\r\n    mainObject.layer = scene.add.layer();\r\n\r\n    mainObject.group = scene.add.container();\r\n    mainObject.group.add([mainObject.player, mainObject.dom, mainObject.engineer, mainObject.man]);\r\n    mainObject.group.add(object.list);\r\n\r\n    ui.group = scene.add.container();\r\n    ui.group.add([ui.background, ui.mark, ui.next, ui.gameGroup, ui.dialogGroup, ui.taskGroup, ui.largeText, ui.white, ui.title, ui.skip]);\r\n\r\n    // 레이어 정렬\r\n    mainObject.layer.add(mainObject.group);\r\n    mainObject.layer.add(mainObject.particles);\r\n    mainObject.layer.add(ui.group);\r\n    mainObject.layer.add(ui.effectGroup);\r\n    mainObject.layer.add(mainObject.TitleParticle);\r\n}\r\nfunction setAnimations(scene) {\r\n    // TODO 애니메이션 추가\r\n    scene.anims.create({\r\n        key: 'mark',\r\n        frames: scene.anims.generateFrameNumbers('mark', { start: 0, end: 1, first: 0 }),\r\n        frameRate: 2,\r\n        repeat: -1\r\n    });\r\n    scene.anims.create({\r\n        key: 'pc-err',\r\n        frames: scene.anims.generateFrameNumbers('pc-err', { start: 0, end: 5, first: 0 }),\r\n        frameRate: 24,\r\n        repeat: -1\r\n    });\r\n}\r\nfunction setLines(scene) {\r\n    // TODO 텍스트 데이터 생성 및 정리\r\n    let jsonText = scene.cache.json.get('text');\r\n    line.chapter = jsonText.chapter;\r\n    line.task = jsonText.task;\r\n    line.opening = jsonText.opening;\r\n    line.story = jsonText.story;\r\n    console.log(line);\r\n}\r\n\r\n// TODO 동작 메서드\r\nfunction Move(character, target, speed) {\r\n    game.scene.scenes[0].physics.moveToObject(character, target, speed);\r\n}\r\nfunction moveCharacter(character) {\r\n    if(character === mainObject.player){\r\n        mainConfig.playerTarget.x = mainConfig.playerPath[mainConfig.playerCount].x;\r\n        mainConfig.playerTarget.y = mainConfig.playerPath[mainConfig.playerCount].y;\r\n        if(character.anims.currentAnim.key !== 'player-run') character.play('player-run');\r\n        mainObject.player.setFlipX(mainObject.player.x - mainConfig.playerTarget.x > 0);\r\n        Move(mainObject.player, mainConfig.playerTarget, 160);\r\n    }\r\n    else if(character === mainObject.dom){\r\n        mainConfig.domTarget.x = mainConfig.domPath[mainConfig.domCount].x;\r\n        mainConfig.domTarget.y = mainConfig.domPath[mainConfig.domCount].y;\r\n        if(character.anims.currentAnim.key !== 'dom-run') character.play('dom-run');\r\n        mainObject.dom.setFlipX(mainObject.dom.x - mainConfig.domTarget.x > 0);\r\n        Move(mainObject.dom, mainConfig.domTarget, 160);\r\n    }\r\n}\r\nfunction moveToPoint(character, x, y, withPath){\r\n    if(character === mainObject.player){\r\n        mainConfig.playerMovable = false;\r\n        mainConfig.playerCount = 1;\r\n        mainConfig.playerPath = (withPath) ? maps.navMesh.findPath(mainObject.player, { x: x, y: y }) : [{ x: mainObject.player.x, y: mainObject.player.y }, { x: x, y: y }];\r\n        if(mainConfig.playerPath === null || mainConfig.playerPath.length < 1) return;\r\n        moveCharacter(mainObject.player);\r\n    }\r\n    else if(character === mainObject.dom){\r\n        mainConfig.domCount = 1;\r\n        mainConfig.domPath = (withPath) ? maps.navMesh.findPath(mainObject.dom, { x: x, y: y }) : [{ x: mainObject.dom.x, y: mainObject.dom.y }, { x: x, y: y }];\r\n        if(mainConfig.domPath === null || mainConfig.domPath.length < 1) return;\r\n        moveCharacter(mainObject.dom);\r\n    }\r\n}\r\nfunction path_log() {\r\n    debug.graphics.clear();\r\n    if(mainConfig.playerPath === null) {\r\n        return;\r\n    }\r\n    let line = new Phaser.Curves.Path(mainObject.player.x, mainObject.player.y);\r\n    for (let i = 0; i < mainConfig.playerPath.length; i++)\r\n    {\r\n        line.lineTo(mainConfig.playerPath[i].x, mainConfig.playerPath[i].y);\r\n        debug.graphics.fillRect(mainConfig.playerPath[i].x - 4, mainConfig.playerPath[i].y - 4, 8, 8);\r\n    }\r\n    debug.graphics.lineStyle(1, 0xff0000, 1);\r\n    line.draw(debug.graphics);\r\n}\r\nfunction RandomPlusMinus() {\r\n    return (Math.random() > 0.5) ? 1 : -1;\r\n}\r\nfunction RandomizePos(obj, x, y, min, max) {\r\n    obj.x = x + min + Math.random() * max * RandomPlusMinus();\r\n    obj.y = y + min + Math.random() * max * RandomPlusMinus();\r\n}\r\nfunction shakeObject(obj, max, speed, time) {\r\n    if(timer.shaker !== undefined) return;\r\n    const x = obj.x;\r\n    const y = obj.y;\r\n    setTimeout(()=> {\r\n        clearTimeout(timer.shaker);\r\n        timer.shaker = undefined;\r\n        obj.x = x;\r\n        obj.y = y;\r\n    }, time);\r\n    repeat();\r\n    function repeat() {\r\n        RandomizePos(obj, x, y, 0, max);\r\n        timer.shaker = setTimeout(repeat, speed);\r\n    }\r\n}\r\nfunction typewriteText(object, txt, speed) {\r\n    eventByIndex();\r\n    if(txt === undefined) return;\r\n    game.scene.scenes[0].time.removeEvent(event.type);\r\n    const length = txt.length\r\n    // 타이핑 도중에 재실행\r\n    if(event.typing === true){\r\n        event.typing = false;\r\n        object.text = txt;\r\n        status.index++;\r\n    }\r\n    else {\r\n        object.text = '';\r\n        let i = 0;\r\n        event.type = game.scene.scenes[0].time.addEvent({\r\n            callback: () => {\r\n                object.text += txt[i]\r\n                ++i\r\n                if(i < length){\r\n                    event.typing = true;\r\n                }\r\n                else {\r\n                    // 타이핑이 끝나고 실행\r\n                    event.typing = false;\r\n                    object.text = txt;\r\n                    status.index++;\r\n                }\r\n            },\r\n            repeat: length - 1,\r\n            delay: speed\r\n        })\r\n    }\r\n}\r\nfunction keyboardAction(key) {\r\n    if(mainConfig.clear[0]) return;\r\n    if(key < 10){\r\n        if(ui.pcInfo.length === 4) return;\r\n        ui.pcInfo += '' + key;\r\n        ui.pcDown.setVisible(false);\r\n    }\r\n    if(key === 'esc-'){\r\n        ui.pcInfo = '';\r\n        ui.pcDown.setVisible(false);\r\n    }\r\n    if(key === 'danger-'){\r\n        ui.pcInfo = '';\r\n        ui.pcDown.setVisible(true);\r\n    }\r\n    if(key === 'enter-'){\r\n        if(ui.pcDown.visible === true){\r\n            pcShutDown('danger');\r\n        }\r\n        else {\r\n            if(ui.pcInfo.length === 4){\r\n                if(ui.pcInfo === '1234'){\r\n                    pcShutDown('1234');\r\n                }\r\n                else if(ui.pcInfo === '0000'){\r\n                    pcShutDown('0000');\r\n                }\r\n                else {\r\n                    for (let i = 0; i < 4; i++) {\r\n                        shakeObject(ui.pcPw, 10, 10, 240);\r\n                        setTimeout(function () {\r\n                            ui.pcInfo = '';\r\n                            for (let i = 0; i < 4; i++) {\r\n                                ui.pcPwList[i].setVisible(false);\r\n                            }\r\n                        }, 420);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n        ui.pcPwList[i].setVisible(false);\r\n    }\r\n    for (let i = 0; i < ui.pcInfo.length; i++) {\r\n        ui.pcPwList[i].setVisible(true);\r\n    }\r\n}\r\nfunction pcShutDown(way) {\r\n    if(way === '1234'){\r\n        line.story[1][14] = \"[폰 왈도 노이만 3세]\\n어떻게 비밀번호를 알아냈지?!\\n천재가 분명해! 자네..\";\r\n    }\r\n    else if(way === '0000'){\r\n        line.story[1][14] = \"[폰 왈도 노이만 3세]\\n초기화 패스워드 0000이라..자네..\\n나랑 일해볼 생각 없나..?\";\r\n    }\r\n    else if(way === 'power'){\r\n        line.story[1][14] = \"[폰 왈도 노이만 3세]\\n파워를 직접적으로 차단한다..\\n자네.. 컴퓨터를 좀 아는군?\";\r\n    }\r\n    else if(way === 'danger'){\r\n        line.story[1][14] = \"[폰 왈도 노이만 3세]\\n그 버튼은 무서워서 단 한번도\\n못 눌러봤는데.. 대담한 친구로군..\";\r\n    }\r\n\r\n    let scene = game.scene.scenes[0];\r\n    mainConfig.clear[0] = true;\r\n    ui.pcOff.setVisible(true);\r\n    scene.tweens.addCounter({\r\n        from: 255,\r\n        to: 0,\r\n        duration: 1800,\r\n        ease: Phaser.Math.Easing.Quintic.In,\r\n        onUpdate: function (tween)\r\n        {\r\n            const value = Math.floor(tween.getValue());\r\n            ui.pcOff.setFillStyle(Phaser.Display.Color.GetColor(value, value, value));\r\n        },\r\n        onComplete: function () {\r\n            console.log('pc shut down');\r\n            setTask(false);\r\n            scene.tweens.add({\r\n                targets: ui.gameGroup,\r\n                y: -800,\r\n                duration: 1600,\r\n                ease: Phaser.Math.Easing.Quintic.In,\r\n                onComplete: function () {\r\n                    ui.gameGroup.setVisible(false);\r\n                    ui.skip.setVisible(true);\r\n                    ui.dialogGroup.setVisible(true);\r\n                    dialog();\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\nfunction createParts(x, y, vx, vy)\r\n{\r\n    mainConfig.pcCrackCount++;\r\n    if(mainConfig.pcCrackCount === 10) ui.pcCrack.setVisible(true);\r\n    else if(mainConfig.pcCrackCount > 30){\r\n        ui.pcCrack.setTexture('keyboard', 'crack1').setOrigin(1);\r\n    }\r\n    let part =  ui.pcParts.get();\r\n    if (!part) return;\r\n    ui.effectGroup.add(part);\r\n    let r = Math.random();\r\n    if(r > 0 && 0.25 < r) part.setTexture('keyboard', 'parts0');\r\n    else if(r > 0.25 && 0.5 < r) part.setTexture('keyboard', 'parts1');\r\n    else if(r > 0.5 && 0.75 < r) part.setTexture('keyboard', 'parts2');\r\n    else part.setTexture('keyboard', 'parts3');\r\n    part\r\n        .setOrigin(0.5)\r\n        .setScale(2)\r\n        .setGravityY(0)\r\n        .setGravityY(800)\r\n        .enableBody(true, x, y, true, true)\r\n        .setVelocity(vx, vy)\r\n        .setAngularVelocity(400);\r\n\r\n}\r\n// TODO 이벤트 메서드\r\nfunction skip() {\r\n    if(status.scene === 'title'){\r\n        if(mainConfig.debugMode){\r\n            mainObject.TitleEmitter.stop();\r\n            mainObject.TitleEmitter.setVisible(false);\r\n            ui.title.setVisible(false);\r\n            ui.white.setVisible(false);\r\n            chapterTitle(mainConfig.debugMode);\r\n            return;\r\n        }\r\n        status.scene = 'opening';\r\n        mainObject.TitleEmitter.setGravityX(2000);\r\n        mainObject.TitleEmitter.stop();\r\n        game.scene.scenes[0].tweens.add({\r\n            targets: ui.title,\r\n            y: -120,\r\n            duration: 800,\r\n            ease: Phaser.Math.Easing.Quintic.In,\r\n            onComplete: function () {\r\n            }\r\n        });\r\n        game.scene.scenes[0].tweens.add({\r\n            targets: ui.white,\r\n            y: -display.height,\r\n            duration: 1200,\r\n            ease: Phaser.Math.Easing.Quintic.In,\r\n            onComplete: function () {\r\n                ui.largeText.setVisible(true);\r\n                ui.largeText.text = line.opening[status.index];\r\n                shakeObject(ui.largeText, 20, 20, 240);\r\n                status.index++;\r\n            }\r\n        });\r\n    }\r\n    else if(status.scene === 'opening'){\r\n        // 마지막 줄에서 챕터 씬으로 전환\r\n        if(line.opening[status.index] === undefined) {\r\n            if(mainConfig.titleFadeOut !== null) return;\r\n            chapterTitle(mainConfig.debugMode);\r\n        }\r\n        else {\r\n            ui.largeText.text = line.opening[status.index];\r\n            shakeObject(ui.largeText, 20, 20, 240);\r\n            status.index++;\r\n        }\r\n    }\r\n    else if(status.scene === 'chapter'){\r\n        dialog();\r\n    }\r\n}\r\nfunction dialog() {\r\n    if(line.story[status.chapterIdx][status.index] === '*close*'){\r\n        mainObject.dom.play('dom-stand');\r\n        event.typing = false;\r\n        ui.dialogGroup.setVisible(false);\r\n        ui.skip.setVisible(false);\r\n        eventByIndex();\r\n        status.index++;\r\n    }\r\n    else {\r\n        typewriteText(ui.dialog, line.story[status.chapterIdx][status.index], 60);\r\n    }\r\n}\r\nfunction eventByIndex(){\r\n    let chapter = status.chapterIdx;\r\n    let index = status.index;\r\n    let scene = game.scene.scenes[0];\r\n\r\n    if(chapter === 0){\r\n        if(index === 4){\r\n            mainObject.player.play('player-seek');\r\n        }\r\n        if(index === 6){\r\n            setTask(true);\r\n            mainObject.player.play('player-stand');\r\n            let markOn = setTimeout(function () {\r\n                if(mainObject.dom.visible) {\r\n                    clearTimeout(markOn);\r\n                    markOn = undefined;\r\n                    return;\r\n                }\r\n                ui.mark.setVisible(true);\r\n            }, 3200);\r\n            setTimeout(() => mainConfig.playerMovable = true, 0);\r\n            let col = scene.physics.add.overlap(mainObject.player, mainObject.dom, function () {\r\n                col.active = false;\r\n                ui.mark.setVisible(false);\r\n                setVisibleObjects(true, [mainObject.dom, ui.skip, ui.dialogGroup]);\r\n                moveToPoint(mainObject.player, mainObject.dom.x + 60, mainObject.dom.y, true);\r\n                mainConfig.lookAt.player = mainObject.dom;\r\n                mainConfig.lookAt.dom = mainObject.player;\r\n                dialog();\r\n                mainObject.dom.play('dom-talk');\r\n                setTask(false);\r\n            }, null, this);\r\n        }\r\n        if(index === 12){\r\n            setTask(true);\r\n            setTimeout(() => mainConfig.playerMovable = true, 20);\r\n            moveToPoint(mainObject.dom, display.centerW, display.centerH + 80);\r\n            mainConfig.moveFinishedEvent.player = function () {\r\n                let col = scene.physics.add.overlap(mainObject.player, mainObject.dom, function () {\r\n                    col.active = false;\r\n                    setTask(false);\r\n                    setVisibleObjects(true, [ui.skip, ui.dialogGroup]);\r\n                    mainConfig.playerMovable = false;\r\n                    mainConfig.lookAt.player = mainObject.dom;\r\n                    mainConfig.lookAt.dom = mainObject.player;\r\n                    moveToPoint(mainObject.player, mainObject.dom.x - 60, mainObject.dom.y, true);\r\n                    dialog();\r\n                    mainObject.dom.play('dom-talk');\r\n                }, null, this);\r\n            }\r\n        }\r\n        if(index === 19){\r\n            // 다음 스테이지로\r\n            setTask(true);\r\n            setTimeout(() => mainConfig.playerMovable = true, 0);\r\n            setTimeout(() => mainConfig.domFollow = true, 0);\r\n            let col = scene.physics.add.overlap(mainObject.player, ui.next, function () {\r\n                setTask(false);\r\n                console.log('to next stage');\r\n                status.chapterIdx++;\r\n                col.active = false;\r\n                mainConfig.domFollow = false;\r\n                ui.background.setVisible(true).setAlpha(0);\r\n                moveToPoint(mainObject.player, display.centerW, display.height + 180, false);\r\n                moveToPoint(mainObject.dom, display.centerW, display.height + 180, false);\r\n                scene.tweens.add({\r\n                    targets: ui.background,\r\n                    alpha: 1,\r\n                    duration: 2000,\r\n                    onComplete: () => chapterTitle(mainConfig.debugMode)\r\n                });\r\n            }, null, this);\r\n        }\r\n    }\r\n    if(chapter === 1) {\r\n        if (index === 3) {\r\n            setTimeout(function () {\r\n                setTask(true);\r\n                mainObject.dom.play('dom-stand');\r\n                mainConfig.playerMovable = true;\r\n                mainConfig.domFollow = true;\r\n            }, 0);\r\n            let col = scene.physics.add.overlap(mainObject.player, mainObject.engineer, function () {\r\n                col.active = false;\r\n                setTask(false);\r\n                mainConfig.playerMovable = false;\r\n                mainConfig.domFollow = false;\r\n                mainConfig.lookAt.player = mainObject.engineer;\r\n                mainConfig.lookAt.engineer = mainObject.player;\r\n                moveToPoint(mainObject.player, mainObject.engineer.x + 60, mainObject.engineer.y, true);\r\n                moveToPoint(mainObject.dom, mainObject.engineer.x - 60, mainObject.engineer.y, true);\r\n                if(!ui.dialogGroup.visible) {\r\n                    ui.skip.setVisible(true);\r\n                    ui.dialogGroup.setVisible(true);\r\n                }\r\n                dialog();\r\n                mainObject.engineer.play('en-talk');\r\n            }, null, this);\r\n        }\r\n        else if (index === 7) {\r\n            mainObject.engineer.play('en-stand');\r\n        }\r\n        else if (index === 8) {\r\n            mainObject.engineer.play('en-talk');\r\n        }\r\n        else if (index === 13){\r\n            setTask(true);\r\n            ui.gameGroup.y = 600;\r\n            ui.gameGroup.setVisible(true);\r\n            scene.tweens.add({\r\n                targets: ui.gameGroup,\r\n                y: 0,\r\n                duration: 2000,\r\n                ease: Phaser.Math.Easing.Quintic.Out\r\n            });\r\n        }\r\n    }\r\n}\r\nfunction setVisibleObjects(bool, arr) {\r\n    // 배열 오브젝트 모두 setVisible 실행\r\n    for (let i = 0; i < arr.length; i++) {\r\n        arr[i].setVisible(bool);\r\n    }\r\n}\r\nfunction moveFinished(character) {\r\n    // 이동 완료 후 바라보기\r\n    let name = '';\r\n    if(character === mainObject.player){\r\n        name = 'player';\r\n    }\r\n    else if(character === mainObject.dom){\r\n        name = 'dom';\r\n    }\r\n    else if(character === mainObject.engineer){\r\n        name = 'engineer';\r\n    }\r\n    if(mainConfig.moveFinishedEvent[name] !== null) {\r\n        mainConfig.moveFinishedEvent[name]();\r\n        mainConfig.moveFinishedEvent[name] = null;\r\n    }\r\n    if(mainConfig.playerMovable) return;\r\n    for(value in mainConfig.lookAt){\r\n        if(mainConfig.lookAt[value] !== null) {\r\n            mainObject[value].setFlipX(mainObject[value].x - mainConfig.lookAt[value].x > 0);\r\n        }\r\n    }\r\n}\r\n\r\n// TODO 씬 제어\r\nfunction chapterTitle(skip) {\r\n    if(skip) {\r\n        status.chapterIdx = 1;\r\n        chapterStart(status.chapterIdx);\r\n        return;\r\n    }\r\n    let scene = game.scene.scenes[0];\r\n    ui.largeText.setAlpha(0);\r\n    ui.largeText.setVisible(true);\r\n    ui.largeText.text = line.chapter[status.chapterIdx];\r\n    mainConfig.titleFadeOut = scene.tweens.add({\r\n        targets: ui.largeText,\r\n        alpha: 1,\r\n        duration: 2400,\r\n        yoyo: true,\r\n        ease: Phaser.Math.Easing.Elastic.InOut,\r\n        onComplete: () => chapterStart(status.chapterIdx)\r\n    });\r\n\r\n    function chapterStart(chapterIdx) {\r\n        let scene = game.scene.scenes[0];\r\n        mainConfig.titleFadeOut = null;\r\n        status.scene = 'chapter';\r\n        status.index = 0;\r\n        status.taskIdx = 0;\r\n        console.log(status.scene, status.chapterIdx);\r\n        game.scene.scenes[0].tweens.add({\r\n            targets: ui.background,\r\n            alpha: 0,\r\n            duration: 1200,\r\n            onComplete: () => ui.background.setVisible(false)\r\n        });\r\n        ui.largeText.setVisible(false);\r\n        if(chapterIdx === 0){\r\n            zoomOut(mainConfig.debugMode);\r\n            function zoomOut(on) {\r\n                if(on){\r\n                    ui.dialogGroup.setVisible(true);\r\n                    dialog();\r\n                    ui.skip.setInteractive();\r\n                }\r\n                else {\r\n                    ui.skip.disableInteractive();\r\n                    ui.cam.zoom = 4;\r\n                    ui.cam.pan(mainObject.player.x, mainObject.player.y - 32, 1);\r\n                    setTimeout(function () {\r\n                        ui.cam.pan(display.centerW, display.centerH, 2800, Phaser.Math.Easing.Quintic.InOut, true);\r\n                        ui.cam.zoomTo(1, 2800, Phaser.Math.Easing.Quintic.InOut);\r\n                        ui.cam.on(Phaser.Cameras.Scene2D.Events.ZOOM_COMPLETE, () => {\r\n                            ui.dialogGroup.setVisible(true);\r\n                            dialog();\r\n                            ui.skip.setInteractive();\r\n                        });\r\n                    }, 400);\r\n                }\r\n            }\r\n        }\r\n        else if(chapterIdx === 1){\r\n            ui.skip.setVisible(false);\r\n            maps.navMesh.destroy();\r\n            mainObject.dom.setVisible(true);\r\n            maps.wallLayer[0].setVisible(false);\r\n            maps.wallLayer[1].setVisible(true);\r\n            maps.navMesh = scene.navMeshPlugin.buildMeshFromTiled(\"mesh\", maps.objectLayer[1], 12.5);\r\n            setVisibleObjects(false, [object.list[0], object.list[1]]);\r\n            object.list[2].setVisible(true);\r\n\r\n            mainObject.particles.setVisible(false);\r\n            mainObject.engineer.setVisible(true);\r\n            mainObject.player.x = mainObject.dom.x = display.centerW;\r\n            mainObject.player.y = mainObject.dom.y = -80;\r\n\r\n            moveToPoint(mainObject.player, display.centerW + 30, 100, false);\r\n            moveToPoint(mainObject.dom, display.centerW - 30, 100, false);\r\n            mainConfig.moveFinishedEvent.player = function () {\r\n                mainConfig.lookAt.player = mainObject.dom;\r\n                mainConfig.lookAt.dom = mainObject.player;\r\n                if(!ui.dialogGroup.visible) {\r\n                    ui.skip.setVisible(true);\r\n                    ui.dialogGroup.setVisible(true);\r\n                }\r\n                dialog();\r\n            }\r\n            mainConfig.moveFinishedEvent.dom = function () {\r\n                mainObject.dom.play('dom-talk');\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}